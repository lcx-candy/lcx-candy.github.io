<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雒晓晓Blog</title>
  
  <subtitle>得意淡然，失意坦然；喜而不狂，忧而不伤。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-24T12:00:34.119Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>雒春晓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django-环境和项目分离的方式</title>
    <link href="http://yoursite.com/2019/06/24/Django_%E7%8E%AF%E5%A2%83%E5%92%8C%E9%A1%B9%E7%9B%AE%E5%88%86%E7%A6%BB%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/24/Django_环境和项目分离的方式/</id>
    <published>2019-06-24T12:01:10.448Z</published>
    <updated>2019-06-24T12:00:34.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤（Windows）"><a href="#步骤（Windows）" class="headerlink" title="步骤（Windows）"></a>步骤（Windows）</h2><hr><ol><li><p>创建一个专门放虚拟环境的文件夹env</p></li><li><p>创建你的虚拟环境文件夹env/文件夹名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env/1902djangoenv</span><br></pre></td></tr></table></figure></li><li><p>进到文件夹中，启动cmd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env/1902djangoenv&gt;python -m venv 1902djangoenv</span><br></pre></td></tr></table></figure></li><li><p>进入1902djangoenv中的Scripts文件夹安装django三方库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1902djangoenv) E:\env\1902djangoenv&gt;cd Scripts</span><br><span class="line">(1902djangoenv) E:\env\1902djangoenv\Scripts&gt;pip install django==2.1.8</span><br></pre></td></tr></table></figure></li><li><p>创建一个专门放django代码的文件夹wordspace</p></li><li><p>依次创建1902.django\day01</p></li><li><p>创建我们的工程（工程名：axf）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1902djangoenv) E:\wordspace\1902.django\day01&gt;django-admin startproject axf</span><br></pre></td></tr></table></figure></li><li><p>用pycharm打开工程后，配置我们已经创建好的虚拟环境</p></li><li><p>点击Terminal，激活虚拟环境</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;步骤（Windows）&quot;&gt;&lt;a href=&quot;#步骤（Windows）&quot; class=&quot;headerlink&quot; title=&quot;步骤（Windows）&quot;&gt;&lt;/a&gt;步骤（Windows）&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个专门放虚拟环境的文件夹env&lt;/
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>配日志和Django-Debug-Toolbar</title>
    <link href="http://yoursite.com/2019/06/23/Blog_Django-Debug-Toolbar/"/>
    <id>http://yoursite.com/2019/06/23/Blog_Django-Debug-Toolbar/</id>
    <published>2019-06-23T13:59:36.099Z</published>
    <updated>2019-06-23T13:59:32.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p><strong>查看系统运转状况，查看调试信息，在开发阶段两种方式都要加上。项目上线之后要把Django-Debug-Toolbar删除。</strong></p><h2 id="配日志"><a href="#配日志" class="headerlink" title="配日志"></a>配日志</h2><hr><h3 id="1-1-说明"><a href="#1-1-说明" class="headerlink" title="1.1 说明"></a>1.1 说明</h3><ol><li><p>Python中定义了六个级别的日志，按照从低到高的顺序依次是：NOTSET、DEBUG（可以看到最详细的日志）、INFO、WARNING、ERROR、CRITICAL（致命级别）。</p></li><li><p>写日志也会影响性能，所以在上线的时候最好用WARNING。</p></li><li><p>日志处理器：项目上线的时候就用”输出到文件“。</p><h3 id="1-2-步骤"><a href="#1-2-步骤" class="headerlink" title="1.2 步骤"></a>1.2 步骤</h3></li><li><p>配日志：查看官方文档，在配置文件settings.py中写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="comment"># 保留字</span></span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment"># 是否禁用已经存在的日志器</span></span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="comment"># 日志格式化器</span></span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="comment"># 简单格式化</span></span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(asctime)s %(module)s.%(funcName)s: %(message)s'</span>,</span><br><span class="line">            <span class="string">'datefmt'</span>: <span class="string">'%Y-%m-%d %H:%M:%S'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 详细格式化</span></span><br><span class="line">        <span class="string">'verbose'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(asctime)s %(levelname)s [%(process)d-%(threadName)s] '</span></span><br><span class="line">                      <span class="string">'%(module)s.%(funcName)s line %(lineno)d: %(message)s'</span>,</span><br><span class="line">            <span class="string">'datefmt'</span>: <span class="string">'%Y-%m-%d %H:%M:%S'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 日志过滤器</span></span><br><span class="line">    <span class="string">'filters'</span>: &#123;</span><br><span class="line">        <span class="comment"># 只有在Django配置文件中DEBUG值为True时才起作用</span></span><br><span class="line">        <span class="string">'require_debug_true'</span>: &#123;</span><br><span class="line">            <span class="string">'()'</span>: <span class="string">'django.utils.log.RequireDebugTrue'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 日志处理器</span></span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="comment"># 输出到控制台</span></span><br><span class="line">        <span class="string">'console'</span>: &#123;</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'filters'</span>: [<span class="string">'require_debug_true'</span>],</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 输出到文件(每周切割一次)</span></span><br><span class="line">        <span class="string">'file1'</span>: &#123;</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.TimedRotatingFileHandler'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'access.log'</span>,</span><br><span class="line">            <span class="string">'when'</span>: <span class="string">'W0'</span>,</span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span>,</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 输出到文件(每天切割一次)</span></span><br><span class="line">        <span class="string">'file2'</span>: &#123;</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.TimedRotatingFileHandler'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'error.log'</span>,</span><br><span class="line">            <span class="string">'when'</span>: <span class="string">'D'</span>,</span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">31</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span>,</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'WARNING'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 日志器记录器</span></span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django'</span>: &#123;</span><br><span class="line">            <span class="comment"># 需要使用的日志处理器</span></span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'file1'</span>, <span class="string">'file2'</span>],</span><br><span class="line">            <span class="comment"># 是否向上传播日志信息</span></span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="comment"># 日志级别(不一定是最终的日志级别)</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出日志，加速查询，减少SQL语句，可以优化性能（<strong>重！</strong>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多对一：select_related('关联属性')</span></span><br><span class="line"><span class="comment"># 多对多：prefetch_related('关联属性')</span></span><br><span class="line">queryset = Teacher.objects.all().select_related(<span class="string">'subject'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置Django-Debug-Toolbar（查看性能）"><a href="#配置Django-Debug-Toolbar（查看性能）" class="headerlink" title="配置Django-Debug-Toolbar（查看性能）"></a>配置Django-Debug-Toolbar（查看性能）</h2><hr><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>安装第三方库：pip install django-debug-toolbar</p></li><li><p>配置  –  修改settings.py，分别在INSTALLED_APPS、MIDDLEWARE添加以下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">     <span class="string">'debug_toolbar'</span>,</span><br><span class="line"> ]</span><br><span class="line"> </span><br><span class="line"> MIDDLEWARE = [</span><br><span class="line">     <span class="string">'debug_toolbar.middleware.DebugToolbarMiddleware'</span>,</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>继续 添加以下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DEBUG_TOOLBAR_CONFIG = &#123;</span><br><span class="line">    <span class="comment"># 引入jQuery库</span></span><br><span class="line">    <span class="string">'JQUERY_URL'</span>: <span class="string">'https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js'</span>,</span><br><span class="line">    <span class="comment"># 工具栏是否折叠</span></span><br><span class="line">    <span class="string">'SHOW_COLLAPSED'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 是否显示工具栏</span></span><br><span class="line">    <span class="string">'SHOW_TOOLBAR_CALLBACK'</span>: <span class="keyword">lambda</span> x: <span class="literal">True</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在urls.py加入配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> debug_toolbar</span><br><span class="line"></span><br><span class="line">    urlpatterns.insert(<span class="number">0</span>, path(<span class="string">'__debug__/'</span>, include(debug_toolbar.urls)))</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;查看系统运转状况，查看调试信息，在开发阶段两种方式都要加上。项目上线之后要把Django-Debug-Toolba
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>报表和统计表</title>
    <link href="http://yoursite.com/2019/06/23/Statements%20and%20statistics/"/>
    <id>http://yoursite.com/2019/06/23/Statements and statistics/</id>
    <published>2019-06-23T13:55:37.842Z</published>
    <updated>2019-06-23T13:54:12.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报表"><a href="#报表" class="headerlink" title="报表"></a>报表</h2><hr><h3 id="1-1导出Excel报表"><a href="#1-1导出Excel报表" class="headerlink" title="1.1导出Excel报表"></a>1.1导出Excel报表</h3><ul><li>报表 = 多样的格式 + 动态的数据</li><li>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_Types" target="_blank" rel="noopener">MIME参考手册</a></li></ul><ol><li><p>在视图函数views.py文件中写函数</p><p>例如（以teacher为例）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_teachers_excel</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""下载老师信息excel"""</span></span><br><span class="line">    <span class="comment"># 创建工作库</span></span><br><span class="line">    wb = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># 添加工作表</span></span><br><span class="line">    sheet = wb.add_sheet(<span class="string">'老师信息表'</span>)</span><br><span class="line">    <span class="comment"># 多对一：select_related('关联属性')</span></span><br><span class="line">    <span class="comment"># 多对多：prefetch_related('关联属性')</span></span><br><span class="line">    <span class="comment"># 查询所有老师的信息</span></span><br><span class="line">    queryset = Teacher.objects.all().select_related(<span class="string">'subject'</span>)</span><br><span class="line">    <span class="comment"># 定制表头</span></span><br><span class="line">    colnames = (<span class="string">'姓名'</span>, <span class="string">'介绍'</span>, <span class="string">'好评数'</span>, <span class="string">'差评数'</span>, <span class="string">'学科'</span>)</span><br><span class="line">    <span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(colnames):</span><br><span class="line">        sheet.write(<span class="number">0</span>, index, name)</span><br><span class="line">    <span class="comment"># 向单元格中写入老师的数据</span></span><br><span class="line">    props = (<span class="string">'name'</span>, <span class="string">'detail'</span>, <span class="string">'good_count'</span>, <span class="string">'bad_count'</span>, <span class="string">'subject'</span>)</span><br><span class="line">    <span class="keyword">for</span> row, teacher <span class="keyword">in</span> enumerate(queryset):</span><br><span class="line">        <span class="keyword">for</span> col, prop <span class="keyword">in</span> enumerate(props):</span><br><span class="line">            <span class="comment"># 动态的给属性赋值</span></span><br><span class="line">            value = getattr(teacher, prop, <span class="string">''</span>)</span><br><span class="line">            <span class="comment"># 判断是否是同一类型</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(value, Subject):</span><br><span class="line">                value = value.name</span><br><span class="line">            sheet.write(row + <span class="number">1</span>, col, value)</span><br><span class="line">    <span class="comment"># 保存Excel</span></span><br><span class="line">    buffer = BytesIO()</span><br><span class="line">    wb.save(buffer)</span><br><span class="line">    <span class="comment"># 将二进制数据写入响应的消息体中并设置MIME类型</span></span><br><span class="line">    resp = HttpResponse(buffer.getvalue(), content_type=<span class="string">'application/vnd-ms.excel'</span>)</span><br><span class="line">    <span class="comment"># quote - %编码，中文文件名需要处理成百分号编码</span></span><br><span class="line">    filename = quote(<span class="string">'老师.xls'</span>)</span><br><span class="line">    <span class="comment"># 加一个响应头，告诉浏览器如何处置这个内容,attachment-下载</span></span><br><span class="line">    resp[<span class="string">'content-disposition'</span>] = <span class="string">f'attachment; filename="<span class="subst">&#123; filename&#125;</span>"'</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-2下载PDF文件"><a href="#1-2下载PDF文件" class="headerlink" title="1.2下载PDF文件"></a>1.2下载PDF文件</h3><ol><li><p>在视图函数views.py文件中写函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_pdf</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 拿到当前路径</span></span><br><span class="line">    path = os.path.dirname(__file__)</span><br><span class="line">    <span class="comment"># 配置路径</span></span><br><span class="line">    filename = os.path.join(path, <span class="string">'resources/Python全栈+人工智能.pdf'</span>)</span><br><span class="line">    <span class="comment"># 打开文件，不能用上下文语法with，会自动关闭，</span></span><br><span class="line">    <span class="comment"># 用流式方式打开文件</span></span><br><span class="line">    file_stream = open(filename, <span class="string">'rb'</span>)</span><br><span class="line">    <span class="comment"># 迭代器，</span></span><br><span class="line">    file_iter = iter(<span class="keyword">lambda</span>: file_stream.read(<span class="number">1024</span>), <span class="string">b''</span>)</span><br><span class="line">    <span class="comment"># 流式的响应，一点一点的加载</span></span><br><span class="line">    resp = StreamingHttpResponse(file_iter, content_type=<span class="string">'application/pdf'</span>)</span><br><span class="line">    filename = quote(<span class="string">'Python全栈+人工智能.pdf'</span>)</span><br><span class="line">    <span class="comment"># 如何处置这个文件</span></span><br><span class="line">    resp[<span class="string">'content-disposition'</span>] = <span class="string">f'inline; filename="<span class="subst">&#123; filename &#125;</span>"'</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure></li></ol><h2 id="统计图表"><a href="#统计图表" class="headerlink" title="统计图表"></a>统计图表</h2><hr><h3 id="生成前端统计图表"><a href="#生成前端统计图表" class="headerlink" title="生成前端统计图表"></a>生成前端统计图表</h3><ul><li><a href="https://echarts.baidu.com/" target="_blank" rel="noopener">ECharts</a>统计图表</li><li>具体的做法是后端通过提供数据接口返回统计图表所需的数据，前端使用<strong>ECharts</strong>来渲染出柱状图、折线图、饼图、散点图等图表。</li><li><strong>only()</strong> - 指定要查询对象的哪些属性（SQL投影操作）</li><li><strong>defer()</strong> - 指定暂时不查询对象的哪些属性</li></ul><ol><li><p>在视图函数views.py文件中写函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_teachers_data</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""获得老师评价数据"""</span></span><br><span class="line">    <span class="comment"># only() - 指定要查询对象的哪些属性（SQL投影操作）</span></span><br><span class="line">    <span class="comment"># defer() - 指定暂时不查询对象的哪些属性</span></span><br><span class="line">    <span class="comment"># 查询老师的信息</span></span><br><span class="line">    queryset = Teacher.objects.all().only(<span class="string">'name'</span>, <span class="string">'good_count'</span>, <span class="string">'bad_count'</span>)</span><br><span class="line">    <span class="comment"># 用生成式将老师的名字放在一个列表中</span></span><br><span class="line">    names = [teacher.name <span class="keyword">for</span> teacher <span class="keyword">in</span> queryset]</span><br><span class="line">    <span class="comment"># 用生成式将老师的好评数放在一个列表中</span></span><br><span class="line">    good = [teacher.good_count <span class="keyword">for</span> teacher <span class="keyword">in</span> queryset]</span><br><span class="line">    <span class="comment"># 用生成式将老师的差评数放在一个列表中</span></span><br><span class="line">    bad = [teacher.bad_count <span class="keyword">for</span> teacher <span class="keyword">in</span> queryset]</span><br><span class="line">    <span class="comment"># 返回JSON格式的数据</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'names'</span>: names, <span class="string">'good'</span>: good, <span class="string">'bad'</span>: bad&#125;)</span><br></pre></td></tr></table></figure></li><li><p>映射URL，在urls.py文件中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'teachers_data/'</span>, views.export_teachers_excel),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>使用ECharts生成柱状图。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width:600px; height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/echarts/4.2.1-rc1/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        var myChart = echarts.init(document.getElementById('main'))</span><br><span class="line">        fetch('/teachers_data/')</span><br><span class="line">            .then(resp =&gt; resp.json())</span><br><span class="line">            .then(json =&gt; &#123;</span><br><span class="line">                var option = &#123;</span><br><span class="line">                color: ['#f00', '#00f'],</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: '老师评价统计表'</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;&#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    data:['好评', '差评']</span><br><span class="line">                &#125;,</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    data: json.names</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;&#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: '好评',</span><br><span class="line">                        type: 'bar',</span><br><span class="line">                        data: json.good</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: '差评',</span><br><span class="line">                        type: 'bar',</span><br><span class="line">                        data: json.bad</span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">            myChart.setOption(option)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;报表&quot;&gt;&lt;a href=&quot;#报表&quot; class=&quot;headerlink&quot; title=&quot;报表&quot;&gt;&lt;/a&gt;报表&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-1导出Excel报表&quot;&gt;&lt;a href=&quot;#1-1导出Excel报表&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>DRF（DjangoRestFramework）框架</title>
    <link href="http://yoursite.com/2019/06/23/DRF/"/>
    <id>http://yoursite.com/2019/06/23/DRF/</id>
    <published>2019-06-23T13:46:12.782Z</published>
    <updated>2019-06-23T13:46:12.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DRF（DjangoRestFramework）框架"><a href="#DRF（DjangoRestFramework）框架" class="headerlink" title="DRF（DjangoRestFramework）框架"></a>DRF（DjangoRestFramework）框架</h2><hr><ul><li>可以很方便的做出REST风格的数据接口</li></ul><h5 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h5><blockquote><p>pip install djangorestframework</p></blockquote><h5 id="1-2-第一种方式：使用ViewSet及其子类"><a href="#1-2-第一种方式：使用ViewSet及其子类" class="headerlink" title="1.2 第一种方式：使用ViewSet及其子类"></a>1.2 第一种方式：使用ViewSet及其子类</h5><blockquote><p>FBV   —   基于函数的视图 –  代码量大，完全自己定制，最灵活<br>CBV   —   基于类的视图  –  代码量更少，个别的地方欠缺灵活性</p></blockquote><ol><li><p>在视图函数中定义类（views.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ModelViewSet模型视图集合</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line"><span class="string">"""汽车视图集合"""</span></span><br><span class="line">queryset = Car.objects.all()</span><br><span class="line"><span class="comment"># serializer_class序列化器对应的类</span></span><br><span class="line">serializer_class = CarSerializer</span><br><span class="line"><span class="comment"># 如果不想分页就写下面这句</span></span><br><span class="line">pagination_class = <span class="literal">None</span>    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecordViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line"><span class="string">"""违章记录视图集合"""</span></span><br><span class="line">queryset = Record.objects.all().select_related(<span class="string">'car'</span>)</span><br><span class="line">serializer_class = RecordSerializer</span><br><span class="line"><span class="comment"># pagination_class = PageNumberPagination</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个专门放序列化器的模块serializers.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> record.models <span class="keyword">import</span> Car, Record</span><br><span class="line"><span class="comment"># ModelSerializer跟模型绑定的序列化器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""汽车序列化器"""</span></span><br><span class="line">    <span class="comment"># 绑定模型</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Car</span><br><span class="line">        <span class="comment"># 所有字段全部都序列化</span></span><br><span class="line">        fields = <span class="string">'__all__'</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarSimpleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">   <span class="string">"""汽车简单序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Car</span><br><span class="line">        <span class="comment"># 把两个字段序列化</span></span><br><span class="line">        fields = (<span class="string">'carno'</span>, <span class="string">'owner'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecordSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""违章记录序列化器"""</span></span><br><span class="line">    makedate = serializers.SerializerMethodField()</span><br><span class="line">    car = serializers.SerializerMethodField()</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_makedate</span><span class="params">(record)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> record.makedate.strftime(<span class="string">'%Y-%m-%d %H:%M'</span>)    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_car</span><span class="params">(record)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> CarSimpleSerializer(record.car).data   </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Record</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure></li><li><p>映射url，配置url，配路由（urls.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个路由的对象</span></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"><span class="comment"># 注册资源名字cars、records</span></span><br><span class="line">router.register(<span class="string">'cars'</span>, CarViewSet)</span><br><span class="line">router.register(<span class="string">'records'</span>, RecordViewSet)</span><br><span class="line"><span class="comment"># 合并url列表</span></span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure></li><li><p>在配置文件settings.py中的INSTALLED_APPS中添加’rest_framework’（后面要加逗号）</p></li><li><p>配置全局分页：在settings.py文件里面加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="1-3-自定义分页"><a href="#1-3-自定义分页" class="headerlink" title="1.3 自定义分页"></a>1.3 自定义分页</h5><ol><li><p>创建一个新模块：utils.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">   <span class="string">"""自定义分页"""</span></span><br><span class="line">   <span class="comment"># 用size来自定义决定一页显示多少条</span></span><br><span class="line">   page_size_query_param = <span class="string">'size'</span></span><br><span class="line">   <span class="comment"># 最多一页写的条数</span></span><br><span class="line">   max_page_size = <span class="number">50</span></span><br></pre></td></tr></table></figure></li><li><p>改settings.py文件，继承自己写的分页类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'record.utils.CustomPagination'</span>,</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="1-4-第二种方式：将数据接口做成单独的应用-通过APIView的子类定制数据接口"><a href="#1-4-第二种方式：将数据接口做成单独的应用-通过APIView的子类定制数据接口" class="headerlink" title="1.4 第二种方式：将数据接口做成单独的应用 +  通过APIView的子类定制数据接口"></a>1.4 第二种方式：将数据接口做成单独的应用 +  通过APIView的子类定制数据接口</h5><ul><li>car只支持查询读取：让视图继承ReadOnlyModelViewSet</li><li>允许查多个、新增，不能查询1个：ListAPIView, CreateAPIView, 如果希望三个父类的get方法都想用，就须重写get方法，</li></ul><ol><li><p>我们专门创建一个来存放接口的应用api：python manage.py  startapp api</p></li><li><p>把record的views.py的视图类转移到 api的views.py里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListCreateAPIView, RetrieveAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> api.serializers <span class="keyword">import</span> CarSerializer, RecordSerializer</span><br><span class="line"><span class="keyword">from</span> record.models <span class="keyword">import</span> Car, Record</span><br><span class="line"><span class="meta">@method_decorator(decorator=cache_page(timeout=86400, cache='default'), name='get')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarView</span><span class="params">(RetrieveAPIView, ListCreateAPIView)</span>:</span></span><br><span class="line"><span class="string">"""汽车视图集合"""</span></span><br><span class="line">queryset = Car.objects.all()</span><br><span class="line"><span class="comment"># 序列化的类,将数据变成Json数据格式</span></span><br><span class="line">serializer_class = CarSerializer</span><br><span class="line"><span class="comment"># 不分页</span></span><br><span class="line">pagination_class = <span class="literal">None</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'pk'</span> <span class="keyword">in</span> kwargs:</span><br><span class="line"><span class="comment"># 类调用get方法</span></span><br><span class="line">           <span class="keyword">return</span> RetrieveAPIView.get(self, request, *args, **kwargs)</span><br><span class="line">         <span class="keyword">return</span> ListCreateAPIView.get(self, request, *args, **kwargs)</span><br><span class="line"><span class="meta">@method_decorator(decorator=cache_page(timeout=300, cache='default'), name='retrieve')</span></span><br><span class="line"><span class="meta">@method_decorator(decorator=cache_page(timeout=300, cache='default'), name='list')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecordViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""违章记录视图集合"""</span></span><br><span class="line">    queryset = Record.objects.all().select_related(<span class="string">'car'</span>)</span><br><span class="line">    serializer_class = RecordSerializer</span><br><span class="line">    pagination_class = PageNumberPagination</span><br></pre></td></tr></table></figure></li><li><p>把serializers.py搬到api应用中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> record.models <span class="keyword">import</span> Car, Record</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"><span class="string">"""汽车序列化器"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = Car</span><br><span class="line">fields = <span class="string">'__all__'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarSimpleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"><span class="string">"""汽车简单序列化器"""</span>   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = Car</span><br><span class="line">fields = (<span class="string">'carno'</span>, <span class="string">'owner'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecordSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""违规记录序列化器"""</span></span><br><span class="line">    makedate = serializers.SerializerMethodField()</span><br><span class="line">    car = serializers.SerializerMethodField()</span><br><span class="line">    <span class="comment"># 格式化日期</span></span><br><span class="line">    <span class="comment"># 需要特别设置的话就将这个属性过滤出来</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_makedate</span><span class="params">(record)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> record.makedate.strftime(<span class="string">'%Y-%m-%d %H:%M'</span>)</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_car</span><span class="params">(record)</span>:</span></span><br><span class="line">        <span class="comment"># 序列化器.data  拿到字典</span></span><br><span class="line">        <span class="keyword">return</span> CarSimpleSerializer(record.car).data</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Record</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure></li><li><p>把工具类utils.py也可以搬到api应用中</p></li><li><p>改配置文件settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'api.utils.CustomPagination'</span>,</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>把工程文件中的urls.py复制一份到api应用下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> api.views <span class="keyword">import</span> CarView, RecordViewSet</span><br><span class="line"><span class="comment"># CarView.as_view() 把类变成视图</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(<span class="string">'cars/'</span>, CarView.as_view()),</span><br><span class="line">    path(<span class="string">'cars/&lt;int:pk&gt;/'</span>, CarView.as_view()),</span><br><span class="line">]</span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">'records'</span>, RecordViewSet)</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure></li><li><p>工程文件中的urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'api/'</span>, include(<span class="string">'api.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><h5 id="1-5-第三种方式：使用装饰器（FBV定制视图）（用地区表作为例子）"><a href="#1-5-第三种方式：使用装饰器（FBV定制视图）（用地区表作为例子）" class="headerlink" title="1.5 第三种方式：使用装饰器（FBV定制视图）（用地区表作为例子）"></a>1.5 第三种方式：使用装饰器（FBV定制视图）（用地区表作为例子）</h5><ul><li><p>用第二种方式的写法：（查询全国所有省级行政区域）</p><p>在在视图函数api/views.py中写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistrictView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = District.objects.filter(parent__isnull=<span class="literal">True</span>)</span><br><span class="line">    serializer_class = DistrictSerializer</span><br><span class="line">    pagination_class = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在serializers.py模块中写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistrictSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""地区序列化器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = District</span><br><span class="line">        exclude = (<span class="string">'parent'</span>, <span class="string">'ishot'</span>)</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>说明：</p><blockquote><p>使用Django自带的视图装饰器（@cache_page）来实现对API接口返回数据的缓存</p></blockquote></li><li><p>在视图函数api/views.py中写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到所有的省，把请求传过来</span></span><br><span class="line"><span class="comment"># 装饰器的作用：这个接口支持哪些请求；如果是POST、PUT、DELETE请求，可以免除令牌（里面自带了一个免除令牌的装饰器crsf_exempt），但为了防范跨站请求风险，需要其他的替换方案来防范。</span></span><br><span class="line"><span class="meta">@api_view(['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_provinces</span><span class="params">(request)</span>:</span></span><br><span class="line">    queryset = District.objects.filter(parent__isnull=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 序列化数据，拿到一个序列化器。 many=True：告诉它有多个对象，列表；如果没写，就是个字典</span></span><br><span class="line">    serializer = DistrictSerializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># serializer.data：一个字典</span></span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"><span class="comment"># 查询某个省的详情（包含了所有下一级行政区域）</span></span><br><span class="line"><span class="comment"># distid路径参数</span></span><br><span class="line"><span class="meta">@api_view(['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_districts</span><span class="params">(request, distid)</span>:</span></span><br><span class="line">   <span class="comment"># 查单个并且拿它底下的那一级</span></span><br><span class="line">   district = District.objects.filter(distid=distid).first()</span><br><span class="line">   <span class="comment"># 序列化</span></span><br><span class="line">   serializer = DistrictDetailSerializer(district)</span><br><span class="line">   <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure></li><li><p>在在serializers.py模块中写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistrictSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""地区序列化器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = District</span><br><span class="line">        exclude = (<span class="string">'parent'</span>, <span class="string">'ishot'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistrictDetailSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">   <span class="string">"""地区详情序列化器"""</span></span><br><span class="line">   <span class="comment"># 没有cities这个属性，自己定义一个，下面就专门写一个方法来拿到数据并序列化</span></span><br><span class="line">   cities = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line"><span class="meta">   @staticmethod</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">get_cities</span><span class="params">(district)</span>:</span></span><br><span class="line">       cities = District.objects.filter(parent=district)</span><br><span class="line">       <span class="comment"># 序列化</span></span><br><span class="line">       <span class="keyword">return</span> DistrictSerializer(cities, many=<span class="literal">True</span>).data</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">       model = District</span><br><span class="line">       fields = (<span class="string">'distid'</span>, <span class="string">'name'</span>, <span class="string">'intro'</span>, <span class="string">'cities'</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DRF（DjangoRestFramework）框架&quot;&gt;&lt;a href=&quot;#DRF（DjangoRestFramework）框架&quot; class=&quot;headerlink&quot; title=&quot;DRF（DjangoRestFramework）框架&quot;&gt;&lt;/a&gt;DRF（Djan
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="DRF" scheme="http://yoursite.com/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>RESTful架构</title>
    <link href="http://yoursite.com/2019/06/23/RESTful/"/>
    <id>http://yoursite.com/2019/06/23/RESTful/</id>
    <published>2019-06-23T13:42:09.804Z</published>
    <updated>2019-06-23T13:42:09.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RESTful架构"><a href="#RESTful架构" class="headerlink" title="RESTful架构"></a>RESTful架构</h2><hr><ul><li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a><strong>阮一峰</strong></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a><strong>阮一峰</strong></li><li><a href="http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html" target="_blank" rel="noopener">RESTful API 最佳实践</a><strong>阮一峰</strong></li><li>REST   —   软件即服务   —   SOA（面向服务的架构）   —   WebService   —   微服务</li></ul><ol><li><p>REST（Representational State Transfer），表述性状态转移。</p><p>URL（Universal Resource Locator）统一资源定位符/URI（Universal Resource Identifier）统一资源标识符</p></li><li><p>HTTP协议  –  请求行  -  GET / PIOST / PUT / PATCH / DELETR</p></li><li><p>当你对资源进行操作的时候资源的状态会发生转移</p></li><li><p>关键点</p><blockquote><p>a. URL代表的是资源，要使用名词而不是动词<br>b. 你对资源要做的操作是通过HTTP协议请求行中的动词来说明的<br>c. 所有对资源的操作要做到无状态（两次请求之间不保留任何状态）</p></blockquote></li><li><p>使用了REST风格的应用就称为RESTful风格/架构的应用。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RESTful架构&quot;&gt;&lt;a href=&quot;#RESTful架构&quot; class=&quot;headerlink&quot; title=&quot;RESTful架构&quot;&gt;&lt;/a&gt;RESTful架构&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="RESTful" scheme="http://yoursite.com/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>同源政策</title>
    <link href="http://yoursite.com/2019/06/23/CORS/"/>
    <id>http://yoursite.com/2019/06/23/CORS/</id>
    <published>2019-06-23T13:38:40.812Z</published>
    <updated>2019-06-23T13:38:40.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同源政策（跨域资源共享）"><a href="#同源政策（跨域资源共享）" class="headerlink" title="同源政策（跨域资源共享）"></a>同源政策（跨域资源共享）</h2><hr><ul><li><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">浏览器同源政策及其规避方法</a><strong>阮一峰</strong><h5 id="1-1-含义"><a href="#1-1-含义" class="headerlink" title="1.1 含义"></a>1.1 含义</h5>所谓同源就是指协议相同、域名相同、端口相同。<h5 id="1-2-目的"><a href="#1-2-目的" class="headerlink" title="1.2 目的"></a>1.2 目的</h5>为了保证用户信息学的安全，防止恶意的网站窃取数据。<h5 id="1-3-CORS"><a href="#1-3-CORS" class="headerlink" title="1.3 CORS"></a>1.3 CORS</h5></li><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享CORS详解</a><strong>阮一峰</strong></li><li>主要是绕开浏览器的同源策略</li></ul><ol><li><p>自己写的中间件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许跨域的中间件,get_resp是视图函数</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">allow_cross_origin_middleware</span><span class="params">(get_resp)</span>:</span></span><br><span class="line">        <span class="string">"""支持跨域访问数据接口的中间件"""</span></span><br><span class="line">     <span class="comment"># 不知道有多少参数，就写*args, **kwargs</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">            <span class="comment"># 拿到响应</span></span><br><span class="line">            resp = get_resp(request, *args, **kwargs)</span><br><span class="line">            <span class="comment"># 如果返回的是json数据就设置跨域</span></span><br><span class="line">            <span class="keyword">if</span> resp.content_type == <span class="string">'application/json'</span>:</span><br><span class="line">                <span class="comment"># *代表所有网站都可以跨域拿数据</span></span><br><span class="line">                resp[<span class="string">'Access-Allow-Cross-Origin'</span>] = <span class="string">'*'</span></span><br><span class="line">            <span class="comment"># 返回响应</span></span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">     <span class="comment"># 返回带装饰的函数</span></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p><strong>激活</strong>：在setting.py文件中的MIDDLEWARE加入：record.middlewares.allow_cross_origin_middleware</p></li><li><p>用专门跨域的第三方库</p><p>a. 安装第三方库：pip install django-cors-headers；</p><p>b. 在settings.py文件中的INSTALLED_APPS加入’corsheaders’（记得在后面加逗号）；</p><p>c. 加中间件：在settings.py文件中的MIDDLEWARE加入’corsheaders.middleware.CorsMiddleware’（记得在后面加逗号）；</p><p>d. 最后在settings.py文件中加上下面内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许所有网站跨域获取数据</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 配置跨域白名单</span></span><br><span class="line"><span class="comment"># CORS_ORIGIN_WHITELIST = ('www.abc.com', 'www.baidu.com')</span></span><br><span class="line"><span class="comment"># 是否允许发送Cookie给服务器</span></span><br><span class="line"><span class="comment"># CORS_ALLOW_CREDENTIALS = True</span></span><br><span class="line"><span class="comment"># 跨域请求支持哪些方法</span></span><br><span class="line"><span class="comment"># CORS_ALLOW_METHODS = ('GET', )</span></span><br></pre></td></tr></table></figure><p>e. 允许跨域取数据。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同源政策（跨域资源共享）&quot;&gt;&lt;a href=&quot;#同源政策（跨域资源共享）&quot; class=&quot;headerlink&quot; title=&quot;同源政策（跨域资源共享）&quot;&gt;&lt;/a&gt;同源政策（跨域资源共享）&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="CORS" scheme="http://yoursite.com/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/19/hello-world/"/>
    <id>http://yoursite.com/2019/06/19/hello-world/</id>
    <published>2019-06-19T15:46:36.879Z</published>
    <updated>2019-06-19T15:46:36.879Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
